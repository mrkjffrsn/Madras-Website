{"version":3,"sources":["Containers/DetailsContainer/state/reducer.js","App/state/reducers.js","Containers/HomeContainer/state/reducer.js","App/state/store.js","Containers/HomeContainer/index.js","Containers/DetailsContainer/index.js","App/index.js","serviceWorker.js","index.js"],"names":["detailsReducer","reducers","home","state","action","type","value","data","details","combineReducers","store","createStore","connect","dispatch","onClick","props","e","id","match","params","App","path","component","HomeContainer","DetailsContainer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAaeA,ICTTC,EAAW,CACfC,KCJF,WAA2C,IAArBC,EAAoB,uDAAZ,GAAIC,EAAQ,uCAExC,MAAqB,WAAhBA,EAAOC,KACH,2BACFF,GADL,IAEEG,MAAOF,EAAOG,OAIXJ,GDJPK,QDLF,WAA8C,IAArBL,EAAoB,uDAAZ,GAAIC,EAAQ,uCAE3C,MAAqB,YAAhBA,EAAOC,KACH,2BACFF,GADL,IAEEG,MAAOF,EAAOE,QAIXH,ICDMM,cAAiBR,GEJjBS,EAFDC,YAAaV,GC0BZW,mBAff,SAA0BT,GACxB,MAAO,CACLG,MAAOH,EAAMD,KAAKI,UAItB,SAA6BO,GAC3B,MAAO,CACLC,QAAS,SAAUR,GACjBO,EAAU,CAAER,KAAM,SAAUE,KAAMD,QAMzBM,EA1Bf,SAAwBG,GAMtB,OACE,0BAAMD,QALQ,SAAEE,GAChBD,EAAMD,QAAS,KAIf,cAAwCC,EAAMT,MAA9C,QCuBWM,mBAff,SAA0BT,GACxB,MAAO,CACLG,MAAOH,EAAMK,QAAQF,UAIzB,SAA6BO,GAC3B,MAAO,CACLC,QAAS,SAAUR,GACjBO,EAAU,CAAER,KAAM,UAAWC,cAMpBM,EA9Bf,SAA2BG,GAAQ,IAEzBE,EAAOF,EAAMG,MAAMC,OAAnBF,GAMR,OACE,0BAAMH,QALR,SAAkBE,GAChBD,EAAMD,QAAS,MAIf,iBAA0CG,EAA1C,QCiBWG,MAlBf,WAEE,OACE,kBAAC,IAAD,CAAUV,MAAQA,GAEhB,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,KAAK,QAAQC,UAAWC,IAC/B,kBAAC,IAAD,CAAOF,KAAK,gBAAgBC,UAAWE,IACvC,kBAAC,IAAD,CAAOH,KAAK,IAAIC,UAAWC,QCTjBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DCZNW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.efdc59da.chunk.js","sourcesContent":["\nfunction detailsReducer( state = {}, action ){\n\n  if ( action.type === 'DETAILS' ) {\n    return {\n      ...state,\n      value: action.value \n    }\n  }\n\n  return state\n}\n\nexport default detailsReducer","import { combineReducers } from \"redux\";\nimport homeReducer from '../../Containers/HomeContainer/state/reducer'\nimport detailsReducer from '../../Containers/DetailsContainer/state/reducer'\n\nconst reducers = {\n  home: homeReducer,\n  details: detailsReducer\n}\n\nexport default combineReducers( reducers )","\nfunction homeReducer( state = {}, action ){\n\n  if ( action.type === \"SAMPLE\" ) {\n    return {\n      ...state,\n      value: action.data\n    }\n  }\n\n  return state\n}\n\nexport default homeReducer","import { createStore } from 'redux'\nimport reducers from './reducers'\n\nconst store = createStore( reducers )\n\nexport default store","import React from 'react'\nimport { connect } from 'react-redux'\n\nfunction HomeContainer( props ){\n\n  const onClick = ( e ) => {\n    props.onClick( 5 )\n  }\n\n  return (\n    <span onClick={ onClick } > Home Page { props.value } </span>\n  )\n}\n\nfunction mapStateToProps( state ){\n  return {\n    value: state.home.value\n  }\n}\n\nfunction mapDispatchToProps( dispatch ) {\n  return {\n    onClick: function( value ){\n      dispatch( { type: \"SAMPLE\", data: value } )\n    }\n  }\n}\n\n\nexport default connect( mapStateToProps, mapDispatchToProps )( HomeContainer )","import React from 'react'\nimport { connect } from 'react-redux'\n\nfunction DetailsContainer( props ){\n\n  const { id } = props.match.params\n\n  function onClick( e ){\n    props.onClick( 10 )\n  }\n\n  return (\n    <span onClick={ onClick }> Details Page { id } </span>\n  )\n\n}\n\n\nfunction mapStateToProps( state ){\n  return {\n    value: state.details.value\n  }\n}\n\nfunction mapDispatchToProps( dispatch ){\n  return {\n    onClick: function( value ){\n      dispatch( { type: 'DETAILS', value } )\n    }\n  }\n}\n\n\nexport default connect( mapStateToProps, mapDispatchToProps )(DetailsContainer)","import React from 'react';\nimport { Provider } from 'react-redux'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport store from './state/store'\nimport HomeContainer from '../Containers/HomeContainer'\nimport DetailsContainer from '../Containers/DetailsContainer';\n\n/*\n  Set Up Redux Store Here\n*/\n\nfunction App() {\n\n  return (\n    <Provider store={ store } >\n\n      <Router>\n\n        <Switch>\n          <Route path=\"/home\" component={HomeContainer} />\n          <Route path=\"/playlist/:id\" component={DetailsContainer} />\n          <Route path=\"/\" component={HomeContainer} />\n        </Switch>\n\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}